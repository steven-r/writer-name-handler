name: CI/CD

on:
  push:
    branches: [main,next]
  pull_request:
    branches: [main]
  # This is to catch new releases of VS Code which could cause the extension to break
  schedule:
    - cron: 0 0 * * *

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        vscode-version: [stable]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3.6.0
        with:
          node-version: lts/*

      - run: npm ci

      - name: Test with VS Code ${{ matrix.vscode-version }}
        uses: coactions/setup-xvfb@v1
        env:
          VSCODE_TEST_VERSION: ${{ matrix.vscode-version }}
        with:
          run: npm test
          options: "-screen 0 1600x1200x24"

  build:
    outputs:
      is_new: ${{ steps.semver_check.outputs.new_release_published }}
      channel: ${{ steps.semver_check.outputs.new_release_channel }}
      semver: ${{ steps.semver_check.outputs.new_release_version }}
      shortver: ${{ steps.shortversion.outputs.semver }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: universal
    
    runs-on: ubuntu-latest

    steps:
      - name: Clone Repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node version
        uses: actions/setup-node@v3.6.0
        with:
          node-version: lts/*

      - if: matrix.target != 'universal'
        name: Install dependencies (with binaries)
        run: npm ci
        env:
          npm_config_arch: ${{ matrix.npm_config_arch }}

      - if: matrix.target == 'universal'
        name: Install dependencies (without binaries)
        run: npm ci

      - name: Action For Semantic Release
        id: semver_check
        uses: cycjimmy/semantic-release-action@v3.2.0
        with:
          dry_run: true
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}

      - name: crate changelog
        run: |
          cat >CHANGELOG.md <<EOF
          ${{ steps.semver_check.outputs.new_release_notes }}
          EOF

      - name: set short version of (${{ steps.semver_check.outputs.new_release_version }})
        id: shortversion
        run: echo "semver=${{ steps.semver_check.outputs.new_release_major_version }}.${{ steps.semver_check.outputs.new_release_minor_version }}.${{ steps.semver_check.outputs.new_release_patch_version }}" >$GITHUB_OUTPUT
    
      - name: set target paramter for non-universal target
        if: matrix.target != 'universal'
        run: echo "VSCE_TARGET_PARAM=--target=${{ matrix.target }}" >>$GITHUB_ENV
    
      - name: Build Package (non prod)
        run: npx vsce package --no-git-tag-version --pre-release $VSCE_TARGET_PARAM ${{ steps.shortversion.outputs.semver }}
        env:
          NODE_ENV: development
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        if: github.event_name != 'push' || github.ref != 'refs/heads/main'

      - name: Build Package (prod)
        run: npx vsce package --no-git-tag-version $VSCE_TARGET_PARAM ${{ steps.shortversion.outputs.semver}}
        env:
          NODE_ENV: production
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

      - uses: actions/upload-artifact@v3
        with:
          name: writer-name-helper-${{ matrix.target }}-${{ steps.shortversion.outputs.semver}}.vsix
          path: "*.vsix"

  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: universal

    needs: [build, test]
    if: success() && needs.build.outputs.is_new == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Clone Repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node version
        uses: actions/setup-node@v3.6.0
        with:
          node-version: lts/*

      - run: npm ci

      - uses: actions/download-artifact@v3

      - name: Publish to Visual Studio Marketplace (pre-release)
        run: npx vsce publish --pre-release --no-git-tag-version --packagePath $(find . -iname *.vsix) 
        if: github.event_name != 'scheduled' && (github.event_name != 'push' || github.ref != 'refs/heads/main')
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_PAT }}
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Publish to Visual Studio Marketplace (public)
        run: npx vsce publish --no-git-tag-version --no-git-tag-version --packagePath $(find . -iname *.vsix)
        if: github.event_name != 'scheduled' && (github.event_name == 'push' && github.ref == 'refs/heads/main')
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Publish to Open VSX Registry (Edge)
        uses: HaaLeo/publish-vscode-extension@v1
        if: false && github.event_name != 'push' || github.ref != 'refs/heads/main'
        with:
          preRelease: true
          pat: ${{ secrets.OPEN_VSX_TOKEN }}
          extensionFile: ./marquee-${{ env.RELEASE_VERSION }}.vsix

      - name: Publish to Open VSX Registry (Stable)
        uses: HaaLeo/publish-vscode-extension@v1
        if: false && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          preRelease: false
          pat: ${{ secrets.OPEN_VSX_TOKEN }}
          extensionFile: ./marquee-${{ env.RELEASE_VERSION }}.vsix

      - name: Action For Semantic Release
        if: github.event_name != 'scheduled'
        uses: cycjimmy/semantic-release-action@v3.2.0
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}
